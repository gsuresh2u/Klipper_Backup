
# This file contains a configuration snippet for SYNC CHANGE CARRIAGE 
#  printer using dual carriages (an "IDEX" printer).
#
# See docs/Config_Reference.md for a description of parameters.
#

##############################################################
#
#  macro SYNC_CHANGE_CARRIAGE uses variable:
#
#  printer["gcode_macro VARIABLE"].dual_carriage 
#  defined as example = {'endstop': [-52, 298], 'movespeed': 500, 'feedrate': 30000, 'enable': True} 
#
#  printer["gcode_macro VARIABLE"].hotend_offset
#  defined as example = {0: {'y': 0.0, 'x': 0.0, 'z': 0.0}, 1: {'y': 0.0, 'x': -10.0, 'z': 0.0}, 2: {'y': 0.0, 'x': 0.0, 'z': 0.0}, 3: {'y': 0.0, 'x': -10.0, 'z': 0.0}}

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################
 
 
[gcode_macro _INIT_SYNC_CHANGE_CARRIAGE]          
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}  

  {% if 'dual_carriage' in printer['motion_report'].steppers %}
    {% set name = "dual_carriage" %}                         # name variable
    {% set init = user_vars.dual_carriage %}     # default preset   
  
     {% set axis = printer.configfile.settings.dual_carriage.axis %}  
     {% set endstop_0 =  (printer.configfile.config[('stepper_'+axis)].position_endstop )|int %}
     {% set endstop_1 =  (printer.configfile.config['dual_carriage'].position_endstop)|int  %}

     ### update 'dual_carriage' 
       {% set _dummy = init.update( {'sync_exchange': True, 'parking': [ endstop_0, endstop_1 ] } ) %}
     
        SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
    
  {% endif %}

#####################################################################
# PRINTER SYNC_CHANGE_CARRIAGE MANAGEMENT
# Function description: 
#####################################################################

[gcode_macro SYNC_CHANGE_CARRIAGE]  
description:  params EXTRUDER - define new tool (extruder)
gcode:

  
  {% set user_vars = printer["gcode_macro VARIABLE"] %}
      
  {% if user_vars.dual_carriage.auto_exchange %}   
         
    #{% set act_carriage = (printer.dual_carriage.active_carriage.lstrip('CARRIAGE_'))|int  %}
    {% set act_carriage = 0 if printer.toolhead.extruder in user_vars.toolhead[0] else 1 %} 
   
    {% set axis = printer.configfile.settings.dual_carriage.axis %}  
    {% set act_speed = printer.gcode_move.speed %}

    ### define activate tool axis offset     
     {% set tool = params.EXTRUDER|default('extruder') %}  
     {% set tool_nr = tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0 %}
     {% set offset = user_vars.hotend_offset[tool_nr|int][axis|string] %} 
      
    ### set actual axis position
     {%  set axis_pos =  printer.gcode_move.gcode_position[axis]  %}  

    ### set relative "gap" between carriage and endstop position   
     {%  set tool_pos =  printer.gcode_move.position[axis]  %}  
     {%  set gap_0 =  ((user_vars.dual_carriage.parking[0])|abs  +  tool_pos)|float %}
     {%  set gap_1 =     (user_vars.dual_carriage.parking[1] -  tool_pos)|float  %}

      SET_DUAL_CARRIAGE CARRIAGE=1  MODE=COPY

     ### park carriage 0 and change carriage 1
       {% if  act_carriage == 0  %}

             ### for axis_pos = 0-123
              {% if  gap_0 <= gap_1  %}                      
                  ### sync parking carriage 0 to endstop 
                    SET_GCODE_OFFSET {axis}=0
                    G1{axis + (user_vars.dual_carriage.parking[0])|string}   F{user_vars.dual_carriage.feedrate}
                  ### move carriage 1 to print position
                    SET_DUAL_CARRIAGE CARRIAGE=1  
                    SET_GCODE_OFFSET {axis}={offset}                               
                    G1 {axis + ((axis_pos)|string) } F{user_vars.dual_carriage.feedrate}
            ### for axis_pos = 124-240 
              {% else %}                                     
                  ### sync move to print position 
                     G91  
                     G1 {axis +'-'+((gap_1)|string)} F{user_vars.dual_carriage.feedrate}         
                     G90
                  ### park carriage 0 to endstop
                    SET_DUAL_CARRIAGE CARRIAGE=0 
                    SET_GCODE_OFFSET {axis}=0 
                    G1{axis + (user_vars.dual_carriage.parking[0])|string}   F{user_vars.dual_carriage.feedrate}  
                  ### set offset tool carriage 1      
                     SET_DUAL_CARRIAGE CARRIAGE=1  
                     SET_GCODE_OFFSET {axis}={offset} 
                     G1 {axis + ((axis_pos)|string) } F{user_vars.dual_carriage.feedrate}                                         
               {% endif %}    


    ### park carriage 1 and change carriage 0     
       {% elif  act_carriage ==1  %}

            ### for axis_pos =  0-123
             {% if  gap_0 <= gap_1  %}                      
                   ### sync move to print position  
                      SET_GCODE_OFFSET {axis}={offset}
                      G1 {axis + ((axis_pos)|string)} F{user_vars.dual_carriage.feedrate}     
                   ### park carriage 1 to ensdtop                    
                      SET_DUAL_CARRIAGE CARRIAGE=1  
                      SET_GCODE_OFFSET {axis}=0
                      G1{axis + (user_vars.dual_carriage.parking[1])|string}   F{user_vars.dual_carriage.feedrate}  
                   ### set carriage 0
                       SET_DUAL_CARRIAGE CARRIAGE=0  
                       SET_GCODE_OFFSET {axis}={offset} 
             ### for axis_pos =  124-240
              {% else %}                                 
                   ### sync park carriage 1                      
                     G91  
                     G1 {axis + ((gap_1)|string)} F{user_vars.dual_carriage.feedrate}       
                     G90
                  ### move carriage 0 to print position
                     SET_DUAL_CARRIAGE CARRIAGE=0  
                     SET_GCODE_OFFSET {axis}={offset}                                     
                     G1 {axis + ((axis_pos)|string)} F{user_vars.dual_carriage.feedrate}  
               {% endif %}    
        {% endif %}
     ### restore speed
       G1 F{act_speed}    
  {% endif %}

     ### info "gcode_move.gcode_position"
     # _GET_SYNC_CHANGE_CARRIAGE

# ---------------------------------------------------------------------------

[gcode_macro _GET_SYNC_CHANGE_CARRIAGE]  
description:  
gcode:
        {% set axis = printer.configfile.settings.dual_carriage.axis %}  
           {action_respond_info("G-code %s=%s" % (axiy, printer.gcode_move.gcode_position[axis] ) )}
           {action_respond_info("position %s=%s" % (axiy, printer.gcode_move.position[axis] ) )}
           {action_respond_info("offset %s=%s" % (axiy, printer.gcode_move.homing_origin[axis]) )}

                